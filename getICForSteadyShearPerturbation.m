function [Z0,M,H] = getICForSteadyShearPerturbation(perturbation,g,s,f,th0,L,H,N,a,numCols)

% Function for initialising the Geometric method of Cullen & Purser (1984) 
% for solving the Lagrangian SG Eady slice equations with a small 
% perturbation of the shear flow steady state defined in line 78.
%
% The first input variable should be one of the four strings 'unstable', 
% 'Cullen', 'Visram' or 'stable', which specify the perturbation as that of
% Williams (1967), Cullen (2007), Visram et. al. (2014), or the stable
% perturbation of Egan et. al. (2022), respectively.
%
% If the first input varibale is 'unstable' then the domain height H is
% redefined to maximise the growth rate of the perturbation.
%
% If the first input varibale is 'stable' then the domain height H is
% redefined to ensure that the parameters are in the stable regime.

% Input
%{
Format: variable - class; size; description.

Choice of perturbation

    perturbation - char; n/a; one of the four strings 'unstable', 'Cullen', 'Visram' or 'stable', 
                              which specify the perturbation as that of
                              Williams (1967), Cullen (2007), Visram et. al. (2014), or the stable
                              perturbation of Egan et. al. (2022), respectively

Dimensional parameters

    g     - double; 1 x 1; acceleration due to gravity
    s     - double; 1 x 1; latitudinal temperature gradient
    f     - double; 1 x 1; coriolis parameter
    th0   - double; 1 x 1; reference potential temperature
    L     - double; 1 x 1; half-domain length
    H     - double; 1 x 1; domain height
    N     - double; 1 x 1; bouyancy frequency
    a     - double; 1 x 1; amplitude of perturbation

Simulation parameters

    numCols  - double; 1 x 1; desired number of columns of seeds

%}

% Output
%{
n:= number of seeds

Format: variable - class; size; description.

    Z0 - double; n x 2; seed locations
    M  - double; n x 1; target masses
    H  - double; 1 x 1; domain height

%}

    %% Define function handle for perturbed shear, redefining H if necessary
    
    if length(perturbation)==8
        if prod(perturbation=='unstable')==1
            % Use IC given in Williams (1967) with optimal aspect ratio
            H      = getOptimalAspectRatio(g,s,f,th0,L,N);
            DPPert = DPWilliams(g,f,th0,L,H,N,a);
        else
            error('The frist input variable should one of the following strings: unstable, stable, Cullen, Visram.')
        end
        
    elseif length(perturbation)==6
        if prod(perturbation=='stable')==1
            % Use IC given in Egan et. al. (2022) with parameters in stable regime
            phase = 1/8; % desired phase speed in domain-lengths-per-day
            H  = getStableAspectRatio(g,s,f,th0,L,N,phase);
            DPPert = DPStable(g,f,th0,L,H,N,a);
        
        elseif prod(perturbation=='Cullen')==1
            % Use IC given in Cullen (2007)
            DPPert =  DPCullen(g,f,th0,L,H,a);

        elseif prod(perturbation=='Visram')==1
            % Use IC given in Visram et. al. (2014)
            DPW = DPWilliams(g,f,th0,L,H,N,a);
            DPPert = @(x1,x2)DPW(x1,x2/pi);

        else
            error('The frist input variable should one of the following strings: unstable, stable, Cullen, Visram.')
        end
    else
        error('The frist input variable should one of the following strings: unstable, stable, Cullen, Visram.')
    end
    
    DPSteadyShear = @(x1,x2)[x1,(N^2/f^2)*(x2+H/2)]; % Function handle for steady shear
    
    DP = @(x1,x2)DPSteadyShear(x1,x2)+DPPert(x1,x2); % Function handle for perturbed shear

    %% Quantise the given initial density by a discrete measure with seeds Z0 and masses M
    % Quantise the Lebesgue measure on the rescaled domain 
    % [-L,L]x[0,(Nsq/f^2)*H] using Lloyd algorithm starting with points on a 
    % regular trianglular lattice
    R        = [-L,0,L,(N^2/f^2)*H];      % rescaled domain
    delta    = (R(3)-R(1))/numCols;       % side length of triangle in regular triangular lattice
    Z0       = getTriLattice(R,delta);    % coordinates of vertices of regular triangular lattice in bx with side-length delta
    n        = size(Z0,1);                % number of seeds
    w0       = zeros(n,1);                % weights to generate Voronoi tessellation
    numLloyd = 100;                       % number of iterations of Lloyd algorithm
    perL = true;                          % periodicity in longitudinal direction
    perV = false;                         % periodicity in vertical
    
    for iteration=1:numLloyd
        [~,~,Z0] = mexPDall_2d(R,Z0,w0,perL,perV);    % Lloyd step
    end

    % Find masses of Voronoi cells in rescaled domain generated by Z0 and rescale to give target masses of cells in the fluid domain
    M = mexPDall_2d(R,Z0,w0,perL,perV)*(f^2/N^2);

    % Map points Z0 back to fluid domain [-L,L]x[-H/2,H/2]
    X = [Z0(:,1),(f^2/N^2)*Z0(:,2) - H/2];

    % Define initial seeds to be the image of seeds in X under DP    
    Z0 = DP(X(:,1),X(:,2));
    
end

function [optimalH,optimalAspectRatio,maxGrowthRate] = getOptimalAspectRatio(g,s,f,th0,L,N)
%%
% 01/02/2022
% Function to find the fluid domain height (and aspect ratio) so that the
% maximal growth rate is achieved by the unstable normal mode perturbation 
% defined by the function DPWilliams.

% Input
%{
Format: variable - class; size; description.

    g     - double; 1 x 1; acceleration due to gravity
    s     - double; 1 x 1; latitudinal temperature gradient
    f     - double; 1 x 1; coriolis parameter
    th0   - double; 1 x 1; reference potential temperature
    L     - double; 1 x 1; half-domain length
    N     - double; 1 x 1; bouyancy frequency

%}

% Output
%{
Format: variable - class; size; description.

    optimalH           - fluid domain height
    optimalAspectRatio - fluid domain aspect ratio (length/height)
    maxGrowthRate      - maximal growth rate of perturbation
%}

    % Define square of growth rate function (upto multiplicative constant)
    % and find its maximum
    sigmaSqFun = @(kappa)2*kappa.*coth(2*kappa)-1-kappa.^2;
    negFun          = @(kappa)-sigmaSqFun(kappa);
    
    options = optimset('Display','off');
    kappaMax    = fminunc(negFun,0.8,options);
    
    % Find optimal domain height, aspect ratio and corresponding RMSv
    % growth rate
    optimalH           = 2*kappaMax*f*L/N/pi;
    optimalAspectRatio = 2*L/optimalH;
    maxGrowthRate      = -sqrt(sigmaSqFun(kappaMax))*g*s/N/th0*(24*60*60);

end

function [stableH,stableAspectRatio] = getStableAspectRatio(g,s,f,th0,L,N,phase)
%%
% 01/02/2022
% Function to find the fluid domain height (and aspect ratio) so that the
% normal mode perturbation defined by the function DPStable is linearly 
% stable in the classs of normal modes perturbations.

% Input
%{
Format: variable - class; size; description.

    g     - double; 1 x 1; acceleration due to gravity
    s     - double; 1 x 1; latitudinal temperature gradient
    f     - double; 1 x 1; coriolis parameter
    th0   - double; 1 x 1; reference potential temperature
    L     - double; 1 x 1; half-domain length
    N     - double; 1 x 1; bouyancy frequency
    phase - double; 1 x 1; desired phase speed in domain-lengths-per-day

%}

% Output
%{
Format: variable - class; size; description.

    stableH           - fluid domain height
    stableAspectRatio - fluid domain aspect ratio (length/height)
%}

    % Define square of growth rate function (upto multiplicative constant)
    sigmaSq = @(kappa)2*kappa.*coth(2*kappa)-1-kappa.^2;
    
    % Find value of kappa at boundary between stable and unstable parameter
    % regimes
    options = optimset('Display','off');

    negSigmaSq     = @(kappa)-sigmaSq(kappa);
    kappaCritical = fsolve(negSigmaSq,1.2,options);
    
    % Define phase speed in ms^{-1} as a function of dimensionless wavenumber kappa
    phaseSpeedMetersPerSecond = @(kappa)abs(s)*g*L/N/th0/pi*abs(sqrt(sigmaSq(kappa)));
    
    % Define phase speed in domain-lengths-per-day as a function of dimensionless wavenumber kappa
    secsPerDay = 24*60^2;
    domLength  = 2*L;
    
    phaseSpeedInDomainLengthsPerDay = @(kappa)(secsPerDay/domLength)*phaseSpeedMetersPerSecond(kappa);
    
    % Given desired phase speed in domain-lengths-per-day solve for domain height H
    fun          = @(kappa) phaseSpeedInDomainLengthsPerDay(kappa) - phase;
    kappaStable = fsolve(fun,1.2*kappaCritical,options);
    
    stableH            = 2*f*L*kappaStable/N/pi;
    stableAspectRatio = 2*L/stableH;
    
    % For reference:
     
    % Critical H and critical aspect ratio
    %criticalH           = 2*f*L*kappa_critical/N/pi; 
    %criticalAspectRatio = 2*L/H_critical;
    
    % Predicted phase speed of high frequency disturbances
    %highFreqPhaseSpeedDomainLengthsPerDay = abs(H*s*g/2/f/th0)*(24*60*60)/2/L;

end

function DPW = DPWilliams(g,f,th0,L,H,N,a)
%%
% 01/02/22
% Function returning function handle for the unstable perturbation defined in Williams (1967)

% Input
%{
Format: variable - class; size; description.

    g   - double; 1 x 1; acceleration due to gravity
    f   - double; 1 x 1; coriolis parameter
    th0 - double; 1 x 1; reference potential temperature
    L   - double; 1 x 1; half-domain length
    H   - double; 1 x 1; domain height
    N   - double; 1 x 1; bouyancy frequency
    a   - double; 1 x 1; amplitude of perturbation

%}

% Output
%{
Format: variable - class; size; description.

    DPW - function handle; 1 x 1; function handle for the unstable perturbation defined in Williams (1967)

%}

    % Define constants
    Bu    = N*H/(f*L);    % Burger number
    kappa = Bu*pi/2; 
    A1    = kappa*coth(kappa)-1;
    sigma = sqrt(abs(kappa-tanh(kappa))*abs(coth(kappa)-kappa));
    A2    = sigma;

    % Define perturbations theta_pert and v_pert
    thetaPert = @(x1,x2) (a*N*th0/g)*(A1*sinh(pi*Bu*x2/H).*cos(pi*x1/L) - A2*cosh(pi*Bu*x2/H).*sin(pi*x1/L));
    vPert = @(x1,x2) -a*(A1*cosh(pi*Bu*x2/H).*sin(pi*x1/L) + A2*sinh(pi*Bu*x2/H).*cos(pi*x1/L));

    % Perturbation (function handle)
    DPW = @(x1,x2) [vPert(x1,x2)/f,g/f^2/th0*thetaPert(x1,x2)];                                                 

end

function DPS = DPStable(g,f,th0,L,H,N,a)
%%
% 01/02/22
% Function returning function handle for the stable perturbation defined in Egan et. al. (2022)

% Input
%{
Format: variable - class; size; description.

    g   - double; 1 x 1; acceleration due to gravity
    f   - double; 1 x 1; coriolis parameter
    th0 - double; 1 x 1; reference potential temperature
    L   - double; 1 x 1; half-domain length
    H   - double; 1 x 1; domain height
    N   - double; 1 x 1; bouyancy frequency
    a   - double; 1 x 1; amplitude of perturbation

%}

% Output
%{
Format: variable - class; size; description.

    DPS - function handle; 1 x 1; function handle for the stable perturbation defined in Egan et. al. (2022)

%}

    % Define constants
    Bu    = N*H/(f*L);    % Burger number
    kappa = Bu*pi/2; 
    A1    = kappa*coth(kappa)-1;
    sigma = sqrt(abs(kappa-tanh(kappa))*abs(coth(kappa)-kappa));
    A2    = sigma;

    % Define perturbations theta_pert and v_pert
    thetaPert = @(x1,x2) (a*N*th0/g)*cos(pi*Bu*x1/L).*(A1*sinh(pi*Bu*x2/H) + A2*cosh(pi*Bu*x2/H));
    vPert = @(x1,x2) -a*sin(pi*Bu*x1/L).*(A1*cosh(pi*Bu*x2/H) + A2*sinh(pi*Bu*x2/H));

    % Perturbation (function handle)
    DPS = @(x1,x2) [vPert(x1,x2)/f,g/f^2/th0*thetaPert(x1,x2)];

end

function DPC = DPCullen(g,f,th0,L,H,a)
%%
% 01/02/22
% Function returning function handle for the unstable perturbation defined in Cullen (2007)

% Input
%{
Format: variable - class; size; description.

    g   - double; 1 x 1; acceleration due to gravity
    f   - double; 1 x 1; coriolis parameter
    th0 - double; 1 x 1; reference potential temperature
    L   - double; 1 x 1; half-domain length
    H   - double; 1 x 1; domain height
    a   - double; 1 x 1; amplitude of perturbation

%}

% Output
%{
Format: variable - class; size; description.

    DPC - function handle; 1 x 1; function handle for the unstable perturbation defined in Cullen (2007)

%}
    
    % Perturbation (function handle)
    DPC = @(x1,x2) (g*a/th0/f^2)*sin(pi*(x1/L + x2/H +1/2)).*[H/L,1];  

end

function X = getTriLattice(bx,delta)
%02/01/22
%
%Function returning coordinates X of vertices of a regular triangular 
%lattice of side length delta in a rectangular domain bx
%
% Lattice is oriented parrallel to the horizontal and centered in the 
% verticle. If delta divides the length of the box exactly then the lattice 
% is periodic in the horizontal.
%
% Input
%{
Format: variable - class; size; description.

    bx    - double; 1 x 4; [xmin ymin xmax ymax] specifying rectangular domain
    delta - double; 1 x 1; side length of triangles in lattice
%}

% Output
%{
n := number of vertices of the triangular lattice

Format: variable - class; size; description.

    X - double; n x 2; coordinates of vertices of a triangular lattice
%}

% Example
%{
% Vertices of regular triangular lattice of side-length 0.1 in rectangle
% [0,1] x [0,1]. Since 0.1 divides 1 exactly, the lattice is periodic in
% the horizontal.

    bx    = [0,0,1,1]; %[xmin ymin xmax ymax] specifying rectangular domain
    delta = 0.1;       % side length of triangles in lattice

    X = getTriLattice(bx,delta);

    scatter(X(:,1),X(:,2),5,'filled') % plot the vertices
%}

    L     = bx(3)-bx(1);                  % length of rectangle
    H     = bx(4)-bx(2);                  % height of rectangle

    % orient triangles with base parallel to x-axis
    nx     = floor(L/delta);               % number of seeds along x-direction
    h     = (sqrt(3)/2)*delta;            % height of triangles
    ny     = floor(H/h); % number of seeds along y-direction
    n     = nx*ny;          % total number of seeds
    X     = zeros(n,2);                   % Matrix to store coordinates of seeds
    
    ex = H-(ny-1)*h; % excess height, used to centre seeds in the vertical
    
    % ceil(m/2) many rows of n seeds parallel to the x-axis, spaced a 
    % disctance 2*h in the vertical and with the 
    % left-most seeds on the y-axis
    for j = 1:ceil(ny/2)
        for i = 1:nx
            X(2*(j-1)*nx+i,:)=[(i-1)*delta,2*(j-1)*h]+[0,ex/2]+[bx(1),bx(2)];
        end
    end
    
    % floor(m/2) many rows of n seeds parallel to the x-axis, spaced a 
    % disctance 2*h in the vertical, and with the 
    % left-most seeds on a distance .5*delta from the y-axis
    for j = 1:floor(ny/2)
        for i = 1:nx
            X((2*j-1)*nx+i,:)=[(i-.5)*delta,(2*j-1)*h]+[0,ex/2]+[bx(1),bx(2)];
        end
    end
end